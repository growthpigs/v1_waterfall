{"ast":null,"code":"import axios from 'axios';\n\n// Define the base URL for the API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create an Axios instance\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add the auth token to headers\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token errors and refresh\nlet isRefreshing = false;\nlet failedQueue = [];\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // Check if the error is a 401 and it's not a retry attempt or a refresh token failure\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    if (isRefreshing) {\n      // If already refreshing, add the request to the queue\n      return new Promise((resolve, reject) => {\n        failedQueue.push({\n          resolve,\n          reject\n        });\n      }).then(token => {\n        originalRequest.headers['Authorization'] = `Bearer ${token}`;\n        return axiosInstance(originalRequest);\n      }).catch(err => {\n        return Promise.reject(err);\n      });\n    }\n    originalRequest._retry = true; // Mark as retry to prevent infinite loops\n    isRefreshing = true;\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n      // No refresh token, logout or handle as unauthenticated\n      isRefreshing = false;\n      // Optionally, redirect to login or emit an event\n      // For now, just reject the promise\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      // window.location.href = '/login'; // Or use React Router navigation\n      return Promise.reject(error);\n    }\n    try {\n      const {\n        data\n      } = await axios.post(`${API_BASE_URL}/auth/refresh-token`, {\n        refreshToken\n      });\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('refreshToken', data.refreshToken);\n      axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${data.token}`;\n      originalRequest.headers['Authorization'] = `Bearer ${data.token}`;\n      processQueue(null, data.token);\n      isRefreshing = false;\n      return axiosInstance(originalRequest);\n    } catch (refreshError) {\n      processQueue(refreshError, null);\n      isRefreshing = false;\n\n      // Refresh token failed, clear tokens and redirect/handle\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      // window.location.href = '/login'; // Or use React Router navigation\n\n      return Promise.reject(refreshError);\n    }\n  }\n\n  // For other errors, just reject the promise\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","isRefreshing","failedQueue","processQueue","forEach","prom","resolve","response","_error$response","originalRequest","status","_retry","push","then","catch","err","refreshToken","removeItem","data","post","setItem","defaults","common","refreshError"],"sources":["/Users/rodericandrews/Factory-ai/waterfall-app/client/src/utils/axios.js"],"sourcesContent":["import axios from 'axios';\n\n// Define the base URL for the API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create an Axios instance\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add the auth token to headers\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle token errors and refresh\nlet isRefreshing = false;\nlet failedQueue = [];\n\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n\n    // Check if the error is a 401 and it's not a retry attempt or a refresh token failure\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      if (isRefreshing) {\n        // If already refreshing, add the request to the queue\n        return new Promise((resolve, reject) => {\n          failedQueue.push({ resolve, reject });\n        })\n          .then(token => {\n            originalRequest.headers['Authorization'] = `Bearer ${token}`;\n            return axiosInstance(originalRequest);\n          })\n          .catch(err => {\n            return Promise.reject(err);\n          });\n      }\n\n      originalRequest._retry = true; // Mark as retry to prevent infinite loops\n      isRefreshing = true;\n\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        // No refresh token, logout or handle as unauthenticated\n        isRefreshing = false;\n        // Optionally, redirect to login or emit an event\n        // For now, just reject the promise\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n        // window.location.href = '/login'; // Or use React Router navigation\n        return Promise.reject(error);\n      }\n\n      try {\n        const { data } = await axios.post(`${API_BASE_URL}/auth/refresh-token`, { refreshToken });\n        \n        localStorage.setItem('token', data.token);\n        localStorage.setItem('refreshToken', data.refreshToken);\n        \n        axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${data.token}`;\n        originalRequest.headers['Authorization'] = `Bearer ${data.token}`;\n        \n        processQueue(null, data.token);\n        isRefreshing = false;\n        return axiosInstance(originalRequest);\n      } catch (refreshError) {\n        processQueue(refreshError, null);\n        isRefreshing = false;\n        \n        // Refresh token failed, clear tokens and redirect/handle\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n        // window.location.href = '/login'; // Or use React Router navigation\n        \n        return Promise.reject(refreshError);\n      }\n    }\n\n    // For other errors, just reject the promise\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}