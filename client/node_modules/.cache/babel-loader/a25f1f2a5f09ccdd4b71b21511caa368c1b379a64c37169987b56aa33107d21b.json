{"ast":null,"code":"import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merge class names with Tailwind CSS classes priority handling\n * Combines clsx for conditional classes with tailwind-merge for proper class overrides\n * \n * @param {...string} inputs - Class names to merge\n * @returns {string} - Merged class string\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format a number as currency with the specified currency symbol\n * \n * @param {number} amount - Amount to format\n * @param {string} [currency='€'] - Currency symbol\n * @param {string} [locale='en-US'] - Locale for number formatting\n * @returns {string} - Formatted currency string\n */\nexport function formatCurrency(amount, currency = '€', locale = 'en-US') {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currency === '€' ? 'EUR' : 'USD',\n    currencyDisplay: 'symbol',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount).replace(/^(\\D+)/, currency);\n}\n\n/**\n * Generate a unique ID with optional prefix\n * Useful for form elements that require unique IDs\n * \n * @param {string} [prefix='id'] - Prefix for the ID\n * @returns {string} - Unique ID string\n */\nexport function generateId(prefix = 'id') {\n  return `${prefix}-${Math.random().toString(36).substring(2, 9)}`;\n}\n\n/**\n * Format a date with the specified format\n * \n * @param {Date|string|number} date - Date to format\n * @param {string} [format='medium'] - Format style: 'short', 'medium', 'long', 'full'\n * @param {string} [locale='en-US'] - Locale for date formatting\n * @returns {string} - Formatted date string\n */\nexport function formatDate(date, format = 'medium', locale = 'en-US') {\n  const dateObj = date instanceof Date ? date : new Date(date);\n  return new Intl.DateTimeFormat(locale, {\n    dateStyle: format\n  }).format(dateObj);\n}\n\n/**\n * Truncate text to specified length with ellipsis\n * \n * @param {string} text - Text to truncate\n * @param {number} [length=50] - Maximum length before truncation\n * @returns {string} - Truncated text with ellipsis if needed\n */\nexport function truncateText(text, length = 50) {\n  if (!text || text.length <= length) return text;\n  return `${text.substring(0, length).trim()}...`;\n}\n\n/**\n * Debounce function to limit how often a function is called\n * \n * @param {Function} fn - Function to debounce\n * @param {number} [delay=300] - Delay in milliseconds\n * @returns {Function} - Debounced function\n */\nexport function debounce(fn, delay = 300) {\n  let timeoutId;\n  return function (...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      fn.apply(this, args);\n    }, delay);\n  };\n}","map":{"version":3,"names":["clsx","twMerge","cn","inputs","formatCurrency","amount","currency","locale","Intl","NumberFormat","style","currencyDisplay","minimumFractionDigits","maximumFractionDigits","format","replace","generateId","prefix","Math","random","toString","substring","formatDate","date","dateObj","Date","DateTimeFormat","dateStyle","truncateText","text","length","trim","debounce","fn","delay","timeoutId","args","clearTimeout","setTimeout","apply"],"sources":["/Users/rodericandrews/Factory-ai/waterfall-app/client/src/lib/utils.js"],"sourcesContent":["import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merge class names with Tailwind CSS classes priority handling\n * Combines clsx for conditional classes with tailwind-merge for proper class overrides\n * \n * @param {...string} inputs - Class names to merge\n * @returns {string} - Merged class string\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format a number as currency with the specified currency symbol\n * \n * @param {number} amount - Amount to format\n * @param {string} [currency='€'] - Currency symbol\n * @param {string} [locale='en-US'] - Locale for number formatting\n * @returns {string} - Formatted currency string\n */\nexport function formatCurrency(amount, currency = '€', locale = 'en-US') {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currency === '€' ? 'EUR' : 'USD',\n    currencyDisplay: 'symbol',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount).replace(/^(\\D+)/, currency);\n}\n\n/**\n * Generate a unique ID with optional prefix\n * Useful for form elements that require unique IDs\n * \n * @param {string} [prefix='id'] - Prefix for the ID\n * @returns {string} - Unique ID string\n */\nexport function generateId(prefix = 'id') {\n  return `${prefix}-${Math.random().toString(36).substring(2, 9)}`;\n}\n\n/**\n * Format a date with the specified format\n * \n * @param {Date|string|number} date - Date to format\n * @param {string} [format='medium'] - Format style: 'short', 'medium', 'long', 'full'\n * @param {string} [locale='en-US'] - Locale for date formatting\n * @returns {string} - Formatted date string\n */\nexport function formatDate(date, format = 'medium', locale = 'en-US') {\n  const dateObj = date instanceof Date ? date : new Date(date);\n  return new Intl.DateTimeFormat(locale, {\n    dateStyle: format,\n  }).format(dateObj);\n}\n\n/**\n * Truncate text to specified length with ellipsis\n * \n * @param {string} text - Text to truncate\n * @param {number} [length=50] - Maximum length before truncation\n * @returns {string} - Truncated text with ellipsis if needed\n */\nexport function truncateText(text, length = 50) {\n  if (!text || text.length <= length) return text;\n  return `${text.substring(0, length).trim()}...`;\n}\n\n/**\n * Debounce function to limit how often a function is called\n * \n * @param {Function} fn - Function to debounce\n * @param {number} [delay=300] - Delay in milliseconds\n * @returns {Function} - Debounced function\n */\nexport function debounce(fn, delay = 300) {\n  let timeoutId;\n  return function(...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      fn.apply(this, args);\n    }, delay);\n  };\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,MAAM;AAC3B,SAASC,OAAO,QAAQ,gBAAgB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,EAAEA,CAAC,GAAGC,MAAM,EAAE;EAC5B,OAAOF,OAAO,CAACD,IAAI,CAACG,MAAM,CAAC,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,MAAM,EAAEC,QAAQ,GAAG,GAAG,EAAEC,MAAM,GAAG,OAAO,EAAE;EACvE,OAAO,IAAIC,IAAI,CAACC,YAAY,CAACF,MAAM,EAAE;IACnCG,KAAK,EAAE,UAAU;IACjBJ,QAAQ,EAAEA,QAAQ,KAAK,GAAG,GAAG,KAAK,GAAG,KAAK;IAC1CK,eAAe,EAAE,QAAQ;IACzBC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACT,MAAM,CAAC,CAACU,OAAO,CAAC,QAAQ,EAAET,QAAQ,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,UAAUA,CAACC,MAAM,GAAG,IAAI,EAAE;EACxC,OAAO,GAAGA,MAAM,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,IAAI,EAAET,MAAM,GAAG,QAAQ,EAAEP,MAAM,GAAG,OAAO,EAAE;EACpE,MAAMiB,OAAO,GAAGD,IAAI,YAAYE,IAAI,GAAGF,IAAI,GAAG,IAAIE,IAAI,CAACF,IAAI,CAAC;EAC5D,OAAO,IAAIf,IAAI,CAACkB,cAAc,CAACnB,MAAM,EAAE;IACrCoB,SAAS,EAAEb;EACb,CAAC,CAAC,CAACA,MAAM,CAACU,OAAO,CAAC;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,YAAYA,CAACC,IAAI,EAAEC,MAAM,GAAG,EAAE,EAAE;EAC9C,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACC,MAAM,IAAIA,MAAM,EAAE,OAAOD,IAAI;EAC/C,OAAO,GAAGA,IAAI,CAACR,SAAS,CAAC,CAAC,EAAES,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,KAAK;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,EAAE,EAAEC,KAAK,GAAG,GAAG,EAAE;EACxC,IAAIC,SAAS;EACb,OAAO,UAAS,GAAGC,IAAI,EAAE;IACvBC,YAAY,CAACF,SAAS,CAAC;IACvBA,SAAS,GAAGG,UAAU,CAAC,MAAM;MAC3BL,EAAE,CAACM,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;IACtB,CAAC,EAAEF,KAAK,CAAC;EACX,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}