{"ast":null,"code":"var _jsxFileName = \"/Users/rodericandrews/Factory-ai/waterfall-app/client/src/components/CIA/CIAWizard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"../../utils/axios\";\n// Import other dependencies\nimport { AlertCircle, Building2, Globe, FileText, Download, FileSpreadsheet, Database, Loader2, CheckCircle2 } from \"lucide-react\";\nimport { Button } from \"../ui/button\";\nimport { Input } from \"../ui/input\";\nimport { Label } from \"../ui/label\";\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from \"../ui/card\";\nimport { cn } from \"../../lib/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CIAWizard = () => {\n  _s();\n  // State declarations\n  const [formData, setFormData] = useState({\n    companyName: \"\",\n    websiteUrl: \"\",\n    keyPersonOfInfluence: \"\",\n    primaryKeyword: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [reportId, setReportId] = useState(null);\n  const [reportStatus, setReportStatus] = useState(\"idle\");\n  const [reportProgress, setReportProgress] = useState(0);\n  const [currentPhase, setCurrentPhase] = useState(0);\n  const [phaseDetails, setPhaseDetails] = useState([]);\n  const [reportResults, setReportResults] = useState(null);\n  const [currentPollInterval, setCurrentPollInterval] = useState(5000);\n  const [exportLoading, setExportLoading] = useState({\n    pdf: false,\n    sheets: false,\n    notion: false\n  });\n  const [exportError, setExportError] = useState(null);\n\n  // Constants\n  const initialPollInterval = 5000;\n  const maxPollInterval = 60000;\n  const pollTimeoutRef = useRef(null);\n\n  // Define phases\n  const phases = [{\n    id: 1,\n    name: \"Business Intelligence\",\n    description: \"Analyzing company data and market position\"\n  }, {\n    id: 2,\n    name: \"SEO & Social Intelligence\",\n    description: \"Researching keywords and competitive landscape\"\n  }, {\n    id: 3,\n    name: \"Strategic Synthesis\",\n    description: \"Combining insights for strategic recommendations\"\n  }, {\n    id: 4,\n    name: \"Golden Hippo Offer\",\n    description: \"Developing tiered pricing and value stacks\"\n  }, {\n    id: 5,\n    name: \"Convergence Blender\",\n    description: \"Creating 12-week content calendar\"\n  }, {\n    id: 6,\n    name: \"Master Content Bible\",\n    description: \"Finalizing implementation roadmap\"\n  }];\n\n  // Poll for report status updates - FIXED VERSION WITH PROPER PARENTHESES\n  const pollReportStatus = async (id, currentInterval) => {\n    try {\n      const response = await axios.get(`/cia/reports/${id}/status`);\n      const {\n        status,\n        progress,\n        currentPhase: newPhaseNumber,\n        phaseProgress,\n        errors: reportErrors\n      } = response.data;\n      setReportStatus(status);\n      setReportProgress(progress);\n      if (newPhaseNumber) {\n        setCurrentPhase(newPhaseNumber);\n        updatePhaseDetails(newPhaseNumber, phaseProgress, status);\n      }\n      if (status === \"completed\" || status === \"failed\") {\n        if (status === \"completed\") {\n          fetchReportResults(id);\n        } else if (status === \"failed\" && reportErrors && reportErrors.length > 0) {\n          setErrors(prevErrors => ({\n            ...prevErrors,\n            report: reportErrors.map(err => `${err.stage}: ${err.message}`).join(\", \")\n          }));\n        }\n        if (pollTimeoutRef.current) {\n          clearTimeout(pollTimeoutRef.current);\n        }\n        return;\n      }\n\n      // If still processing, schedule next poll with exponential backoff\n      const nextInterval = Math.min(currentInterval * 2, maxPollInterval);\n      setCurrentPollInterval(nextInterval);\n      pollTimeoutRef.current = setTimeout(() => pollReportStatus(id, nextInterval), nextInterval);\n    } catch (error) {\n      console.error(\"Error polling report status:\", error);\n      let nextInterval = currentInterval;\n      if (error.response && error.response.status === 429) {\n        console.warn(\"Rate limited. Increasing poll interval significantly.\");\n        nextInterval = maxPollInterval;\n      } else {\n        nextInterval = Math.min(currentInterval * 2, maxPollInterval);\n      }\n      setCurrentPollInterval(nextInterval);\n      if (reportStatus !== \"completed\" && reportStatus !== \"failed\") {\n        pollTimeoutRef.current = setTimeout(() => pollReportStatus(id, nextInterval), nextInterval);\n      }\n    }\n  };\n\n  // Add minimal implementations of other functions\n  // Function to update phaseDetails based on API response\n  const updatePhaseDetails = (newPhaseNumber, phaseProgressFromServer, currentStatus) => {\n    setPhaseDetails(prevDetails => {\n      let newPhaseDetails = [...prevDetails];\n\n      // Initialize array if empty\n      if (newPhaseDetails.length === 0) {\n        newPhaseDetails = phases.map(p => ({\n          id: p.id,\n          name: p.name,\n          progress: 0,\n          status: \"pending\"\n        }));\n      }\n\n      // If report is fully completed, mark every phase complete\n      if (currentStatus === \"completed\") {\n        return newPhaseDetails.map(phase => ({\n          ...phase,\n          progress: 100,\n          status: \"completed\"\n        }));\n      }\n\n      // Mark previous phases as completed\n      for (let i = 0; i < newPhaseNumber - 1; i++) {\n        if (newPhaseDetails[i]) {\n          newPhaseDetails[i] = {\n            ...newPhaseDetails[i],\n            progress: 100,\n            status: \"completed\"\n          };\n        }\n      }\n\n      // Update the current phase entry\n      if (newPhaseNumber > 0 && newPhaseNumber <= phases.length) {\n        const currentPhaseIndex = newPhaseNumber - 1;\n        newPhaseDetails[currentPhaseIndex] = {\n          ...newPhaseDetails[currentPhaseIndex],\n          progress: phaseProgressFromServer !== null && phaseProgressFromServer !== void 0 ? phaseProgressFromServer : 0,\n          status: phaseProgressFromServer >= 100 ? \"completed\" : \"processing\"\n        };\n      }\n\n      // Handle failure status\n      if (currentStatus === \"failed\" && newPhaseNumber > 0) {\n        const failingPhaseIndex = newPhaseNumber - 1;\n        // Mark active phase as failed if incomplete\n        if (newPhaseDetails[failingPhaseIndex] && newPhaseDetails[failingPhaseIndex].status !== \"completed\") {\n          newPhaseDetails[failingPhaseIndex].status = \"failed\";\n        }\n        // Reset subsequent phases to pending\n        for (let i = newPhaseNumber; i < phases.length; i++) {\n          if (newPhaseDetails[i]) {\n            newPhaseDetails[i].status = \"pending\";\n            newPhaseDetails[i].progress = 0;\n          }\n        }\n      }\n      return newPhaseDetails;\n    });\n  };\n\n  // Fetch report results\n  const fetchReportResults = async id => {\n    try {\n      const response = await axios.get(`/cia/reports/${id}`);\n      setReportResults(response.data);\n    } catch (error) {\n      console.error(\"Error fetching report results:\", error);\n      setErrors(prev => ({\n        ...prev,\n        results: \"Failed to fetch report results. Please try refreshing the page.\"\n      }));\n    }\n  };\n\n  // Check if all phases are complete\n  const areAllPhasesComplete = () => {\n    if (phaseDetails.length !== phases.length) return false;\n    return phaseDetails.every(phase => phase.status === \"completed\" && phase.progress === 100);\n  };\n\n  /* ------------------------------------------------------------------\n   * Form helpers\n   * ------------------------------------------------------------------ */\n\n  // Handle input changes\n  const handleChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    if (errors[field]) {\n      setErrors(prev => {\n        const newErr = {\n          ...prev\n        };\n        delete newErr[field];\n        return newErr;\n      });\n    }\n  };\n\n  // Validate form\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.companyName.trim()) {\n      newErrors.companyName = \"Company name is required\";\n    }\n    if (!formData.websiteUrl.trim()) {\n      newErrors.websiteUrl = \"Website URL is required\";\n    } else {\n      try {\n        const urlToTest = formData.websiteUrl.startsWith(\"http://\") || formData.websiteUrl.startsWith(\"https://\") ? formData.websiteUrl : `https://${formData.websiteUrl}`;\n        const parsed = new URL(urlToTest);\n        if (!/\\\\.[a-zA-Z]{2,}$/.test(parsed.hostname)) {\n          throw new Error(\"Invalid domain\");\n        }\n      } catch {\n        newErrors.websiteUrl = \"Please enter a valid URL (e.g., https://example.com)\";\n      }\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Submit form\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setIsSubmitting(true);\n    setErrors({});\n    setPhaseDetails([]);\n    setReportProgress(0);\n    setCurrentPhase(0);\n    setReportResults(null);\n    try {\n      const response = await axios.post(\"/cia/reports\", {\n        name: `${formData.companyName} Intelligence Report`,\n        description: `CIA report for ${formData.companyName}`,\n        initialData: {\n          companyName: formData.companyName,\n          websiteUrl: formData.websiteUrl.startsWith(\"http\") ? formData.websiteUrl : `https://${formData.websiteUrl}`,\n          keyPersonOfInfluence: formData.keyPersonOfInfluence ? {\n            name: formData.keyPersonOfInfluence,\n            role: \"Key Person of Influence\"\n          } : {},\n          primaryKeyword: formData.primaryKeyword\n        }\n      });\n      const {\n        id\n      } = response.data.report;\n      setReportId(id);\n      setIsSubmitted(true);\n      setReportStatus(\"processing\");\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Error submitting CIA report:\", error);\n      setErrors({\n        submit: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Failed to submit report. Please try again.\"\n      });\n      setReportStatus(\"failed\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Export report\n  const exportReport = async format => {\n    setExportLoading(prev => ({\n      ...prev,\n      [format]: true\n    }));\n    setExportError(null);\n    try {\n      var _response$data;\n      const response = await axios.post(`/cia/reports/${reportId}/export`, {\n        format\n      });\n      if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.exportUrl)) {\n        throw new Error(\"Missing export URL\");\n      }\n      let fullUrl = response.data.exportUrl;\n      if (fullUrl.startsWith(\"/\")) {\n        fullUrl = `${window.location.origin}${fullUrl}`;\n      }\n      if (format === \"pdf\") {\n        const link = document.createElement(\"a\");\n        link.href = fullUrl;\n        link.download = `${formData.companyName}_CIA_Report.pdf`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      } else {\n        window.open(fullUrl, \"_blank\");\n      }\n    } catch (error) {\n      let msg = `Failed to export as ${format}. `;\n      if (error.response) {\n        msg += `Server responded ${error.response.status}`;\n      } else if (error.request) {\n        msg += \"No response from server.\";\n      } else {\n        msg += error.message;\n      }\n      setExportError(msg);\n    } finally {\n      setExportLoading(prev => ({\n        ...prev,\n        [format]: false\n      }));\n    }\n  };\n\n  // Effect to handle polling\n  useEffect(() => {\n    if (reportId && reportStatus === \"processing\") {\n      if (pollTimeoutRef.current) {\n        clearTimeout(pollTimeoutRef.current);\n      }\n      setCurrentPollInterval(initialPollInterval);\n      pollTimeoutRef.current = setTimeout(() => pollReportStatus(reportId, initialPollInterval), initialPollInterval);\n    }\n    return () => {\n      if (pollTimeoutRef.current) {\n        clearTimeout(pollTimeoutRef.current);\n      }\n    };\n  }, [reportId, reportStatus]);\n\n  // Minimal rendering for testing\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CIA Wizard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Test implementation with fixed axios call syntax\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 5\n  }, this);\n};\n_s(CIAWizard, \"fDyDsjKkCbFJUY6AnVgfMHQoXdk=\");\n_c = CIAWizard;\nexport default CIAWizard;\nvar _c;\n$RefreshReg$(_c, \"CIAWizard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","AlertCircle","Building2","Globe","FileText","Download","FileSpreadsheet","Database","Loader2","CheckCircle2","Button","Input","Label","Card","CardHeader","CardTitle","CardDescription","CardContent","CardFooter","cn","jsxDEV","_jsxDEV","CIAWizard","_s","formData","setFormData","companyName","websiteUrl","keyPersonOfInfluence","primaryKeyword","isSubmitting","setIsSubmitting","isSubmitted","setIsSubmitted","errors","setErrors","reportId","setReportId","reportStatus","setReportStatus","reportProgress","setReportProgress","currentPhase","setCurrentPhase","phaseDetails","setPhaseDetails","reportResults","setReportResults","currentPollInterval","setCurrentPollInterval","exportLoading","setExportLoading","pdf","sheets","notion","exportError","setExportError","initialPollInterval","maxPollInterval","pollTimeoutRef","phases","id","name","description","pollReportStatus","currentInterval","response","get","status","progress","newPhaseNumber","phaseProgress","reportErrors","data","updatePhaseDetails","fetchReportResults","length","prevErrors","report","map","err","stage","message","join","current","clearTimeout","nextInterval","Math","min","setTimeout","error","console","warn","phaseProgressFromServer","currentStatus","prevDetails","newPhaseDetails","p","phase","i","currentPhaseIndex","failingPhaseIndex","prev","results","areAllPhasesComplete","every","handleChange","field","value","newErr","validateForm","newErrors","trim","urlToTest","startsWith","parsed","URL","test","hostname","Error","Object","keys","handleSubmit","e","preventDefault","post","initialData","role","_error$response","_error$response$data","submit","exportReport","format","_response$data","exportUrl","fullUrl","window","location","origin","link","document","createElement","href","download","body","appendChild","click","removeChild","open","msg","request","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rodericandrews/Factory-ai/waterfall-app/client/src/components/CIA/CIAWizard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"../../utils/axios\";\n// Import other dependencies\nimport {\n  AlertCircle,\n  Building2,\n  Globe,\n  FileText,\n  Download,\n  FileSpreadsheet,\n  Database,\n  Loader2,\n  CheckCircle2\n} from \"lucide-react\";\nimport { Button } from \"../ui/button\";\nimport { Input } from \"../ui/input\";\nimport { Label } from \"../ui/label\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter\n} from \"../ui/card\";\nimport { cn } from \"../../lib/utils\";\n\nconst CIAWizard = () => {\n  // State declarations\n  const [formData, setFormData] = useState({\n    companyName: \"\",\n    websiteUrl: \"\",\n    keyPersonOfInfluence: \"\",\n    primaryKeyword: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [reportId, setReportId] = useState(null);\n  const [reportStatus, setReportStatus] = useState(\"idle\");\n  const [reportProgress, setReportProgress] = useState(0);\n  const [currentPhase, setCurrentPhase] = useState(0);\n  const [phaseDetails, setPhaseDetails] = useState([]);\n  const [reportResults, setReportResults] = useState(null);\n  const [currentPollInterval, setCurrentPollInterval] = useState(5000);\n  const [exportLoading, setExportLoading] = useState({\n    pdf: false,\n    sheets: false,\n    notion: false\n  });\n  const [exportError, setExportError] = useState(null);\n\n  // Constants\n  const initialPollInterval = 5000;\n  const maxPollInterval = 60000;\n  const pollTimeoutRef = useRef(null);\n\n  // Define phases\n  const phases = [\n    { id: 1, name: \"Business Intelligence\", description: \"Analyzing company data and market position\" },\n    { id: 2, name: \"SEO & Social Intelligence\", description: \"Researching keywords and competitive landscape\" },\n    { id: 3, name: \"Strategic Synthesis\", description: \"Combining insights for strategic recommendations\" },\n    { id: 4, name: \"Golden Hippo Offer\", description: \"Developing tiered pricing and value stacks\" },\n    { id: 5, name: \"Convergence Blender\", description: \"Creating 12-week content calendar\" },\n    { id: 6, name: \"Master Content Bible\", description: \"Finalizing implementation roadmap\" }\n  ];\n\n  // Poll for report status updates - FIXED VERSION WITH PROPER PARENTHESES\n  const pollReportStatus = async (id, currentInterval) => {\n    try {\n      const response = await axios.get(`/cia/reports/${id}/status`);\n      const { status, progress, currentPhase: newPhaseNumber, phaseProgress, errors: reportErrors } = response.data;\n\n      setReportStatus(status);\n      setReportProgress(progress);\n\n      if (newPhaseNumber) {\n        setCurrentPhase(newPhaseNumber);\n        updatePhaseDetails(newPhaseNumber, phaseProgress, status);\n      }\n\n      if (status === \"completed\" || status === \"failed\") {\n        if (status === \"completed\") {\n          fetchReportResults(id);\n        } else if (status === \"failed\" && reportErrors && reportErrors.length > 0) {\n          setErrors(prevErrors => ({\n            ...prevErrors,\n            report: reportErrors.map(err => `${err.stage}: ${err.message}`).join(\", \")\n          }));\n        }\n        if (pollTimeoutRef.current) {\n          clearTimeout(pollTimeoutRef.current);\n        }\n        return;\n      }\n\n      // If still processing, schedule next poll with exponential backoff\n      const nextInterval = Math.min(currentInterval * 2, maxPollInterval);\n      setCurrentPollInterval(nextInterval);\n      pollTimeoutRef.current = setTimeout(() => pollReportStatus(id, nextInterval), nextInterval);\n\n    } catch (error) {\n      console.error(\"Error polling report status:\", error);\n      let nextInterval = currentInterval;\n      \n      if (error.response && error.response.status === 429) {\n        console.warn(\"Rate limited. Increasing poll interval significantly.\");\n        nextInterval = maxPollInterval;\n      } else {\n        nextInterval = Math.min(currentInterval * 2, maxPollInterval);\n      }\n      \n      setCurrentPollInterval(nextInterval);\n      \n      if (reportStatus !== \"completed\" && reportStatus !== \"failed\") {\n        pollTimeoutRef.current = setTimeout(() => pollReportStatus(id, nextInterval), nextInterval);\n      }\n    }\n  };\n\n  // Add minimal implementations of other functions\n  // Function to update phaseDetails based on API response\n  const updatePhaseDetails = (\n    newPhaseNumber,\n    phaseProgressFromServer,\n    currentStatus\n  ) => {\n    setPhaseDetails(prevDetails => {\n      let newPhaseDetails = [...prevDetails];\n\n      // Initialize array if empty\n      if (newPhaseDetails.length === 0) {\n        newPhaseDetails = phases.map(p => ({\n          id: p.id,\n          name: p.name,\n          progress: 0,\n          status: \"pending\"\n        }));\n      }\n\n      // If report is fully completed, mark every phase complete\n      if (currentStatus === \"completed\") {\n        return newPhaseDetails.map(phase => ({\n          ...phase,\n          progress: 100,\n          status: \"completed\"\n        }));\n      }\n\n      // Mark previous phases as completed\n      for (let i = 0; i < newPhaseNumber - 1; i++) {\n        if (newPhaseDetails[i]) {\n          newPhaseDetails[i] = {\n            ...newPhaseDetails[i],\n            progress: 100,\n            status: \"completed\"\n          };\n        }\n      }\n\n      // Update the current phase entry\n      if (newPhaseNumber > 0 && newPhaseNumber <= phases.length) {\n        const currentPhaseIndex = newPhaseNumber - 1;\n        newPhaseDetails[currentPhaseIndex] = {\n          ...newPhaseDetails[currentPhaseIndex],\n          progress: phaseProgressFromServer ?? 0,\n          status:\n            phaseProgressFromServer >= 100 ? \"completed\" : \"processing\"\n        };\n      }\n\n      // Handle failure status\n      if (currentStatus === \"failed\" && newPhaseNumber > 0) {\n        const failingPhaseIndex = newPhaseNumber - 1;\n        // Mark active phase as failed if incomplete\n        if (\n          newPhaseDetails[failingPhaseIndex] &&\n          newPhaseDetails[failingPhaseIndex].status !== \"completed\"\n        ) {\n          newPhaseDetails[failingPhaseIndex].status = \"failed\";\n        }\n        // Reset subsequent phases to pending\n        for (let i = newPhaseNumber; i < phases.length; i++) {\n          if (newPhaseDetails[i]) {\n            newPhaseDetails[i].status = \"pending\";\n            newPhaseDetails[i].progress = 0;\n          }\n        }\n      }\n\n      return newPhaseDetails;\n    });\n  };\n\n  // Fetch report results\n  const fetchReportResults = async id => {\n    try {\n      const response = await axios.get(`/cia/reports/${id}`);\n      setReportResults(response.data);\n    } catch (error) {\n      console.error(\"Error fetching report results:\", error);\n      setErrors(prev => ({\n        ...prev,\n        results:\n          \"Failed to fetch report results. Please try refreshing the page.\"\n      }));\n    }\n  };\n\n  // Check if all phases are complete\n  const areAllPhasesComplete = () => {\n    if (phaseDetails.length !== phases.length) return false;\n    return phaseDetails.every(\n      phase => phase.status === \"completed\" && phase.progress === 100\n    );\n  };\n\n  /* ------------------------------------------------------------------\n   * Form helpers\n   * ------------------------------------------------------------------ */\n\n  // Handle input changes\n  const handleChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => {\n        const newErr = { ...prev };\n        delete newErr[field];\n        return newErr;\n      });\n    }\n  };\n\n  // Validate form\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.companyName.trim()) {\n      newErrors.companyName = \"Company name is required\";\n    }\n    if (!formData.websiteUrl.trim()) {\n      newErrors.websiteUrl = \"Website URL is required\";\n    } else {\n      try {\n        const urlToTest =\n          formData.websiteUrl.startsWith(\"http://\") ||\n          formData.websiteUrl.startsWith(\"https://\")\n            ? formData.websiteUrl\n            : `https://${formData.websiteUrl}`;\n        const parsed = new URL(urlToTest);\n        if (!/\\\\.[a-zA-Z]{2,}$/.test(parsed.hostname)) {\n          throw new Error(\"Invalid domain\");\n        }\n      } catch {\n        newErrors.websiteUrl =\n          \"Please enter a valid URL (e.g., https://example.com)\";\n      }\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Submit form\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) return;\n\n    setIsSubmitting(true);\n    setErrors({});\n    setPhaseDetails([]);\n    setReportProgress(0);\n    setCurrentPhase(0);\n    setReportResults(null);\n\n    try {\n      const response = await axios.post(\"/cia/reports\", {\n        name: `${formData.companyName} Intelligence Report`,\n        description: `CIA report for ${formData.companyName}`,\n        initialData: {\n          companyName: formData.companyName,\n          websiteUrl: formData.websiteUrl.startsWith(\"http\")\n            ? formData.websiteUrl\n            : `https://${formData.websiteUrl}`,\n          keyPersonOfInfluence: formData.keyPersonOfInfluence\n            ? { name: formData.keyPersonOfInfluence, role: \"Key Person of Influence\" }\n            : {},\n          primaryKeyword: formData.primaryKeyword\n        }\n      });\n      const { id } = response.data.report;\n      setReportId(id);\n      setIsSubmitted(true);\n      setReportStatus(\"processing\");\n    } catch (error) {\n      console.error(\"Error submitting CIA report:\", error);\n      setErrors({\n        submit:\n          error.response?.data?.message ||\n          \"Failed to submit report. Please try again.\"\n      });\n      setReportStatus(\"failed\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Export report\n  const exportReport = async format => {\n    setExportLoading(prev => ({ ...prev, [format]: true }));\n    setExportError(null);\n    try {\n      const response = await axios.post(`/cia/reports/${reportId}/export`, {\n        format\n      });\n      if (!response.data?.exportUrl) {\n        throw new Error(\"Missing export URL\");\n      }\n      let fullUrl = response.data.exportUrl;\n      if (fullUrl.startsWith(\"/\")) {\n        fullUrl = `${window.location.origin}${fullUrl}`;\n      }\n      if (format === \"pdf\") {\n        const link = document.createElement(\"a\");\n        link.href = fullUrl;\n        link.download = `${formData.companyName}_CIA_Report.pdf`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      } else {\n        window.open(fullUrl, \"_blank\");\n      }\n    } catch (error) {\n      let msg = `Failed to export as ${format}. `;\n      if (error.response) {\n        msg += `Server responded ${error.response.status}`;\n      } else if (error.request) {\n        msg += \"No response from server.\";\n      } else {\n        msg += error.message;\n      }\n      setExportError(msg);\n    } finally {\n      setExportLoading(prev => ({ ...prev, [format]: false }));\n    }\n  };\n\n  // Effect to handle polling\n  useEffect(() => {\n    if (reportId && reportStatus === \"processing\") {\n      if (pollTimeoutRef.current) {\n        clearTimeout(pollTimeoutRef.current);\n      }\n      setCurrentPollInterval(initialPollInterval);\n      pollTimeoutRef.current = setTimeout(() => pollReportStatus(reportId, initialPollInterval), initialPollInterval);\n    }\n    \n    return () => {\n      if (pollTimeoutRef.current) {\n        clearTimeout(pollTimeoutRef.current);\n      }\n    };\n  }, [reportId, reportStatus]);\n\n  // Minimal rendering for testing\n  return (\n    <div>\n      <h1>CIA Wizard</h1>\n      <p>Test implementation with fixed axios call syntax</p>\n    </div>\n  );\n};\n\nexport default CIAWizard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}